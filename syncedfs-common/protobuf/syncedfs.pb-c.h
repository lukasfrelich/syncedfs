/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_syncedfs_2eproto__INCLUDED
#define PROTOBUF_C_syncedfs_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _SyncInitialization SyncInitialization;
typedef struct _FileChunk FileChunk;
typedef struct _FileOperation FileOperation;
typedef struct _GenericOperation GenericOperation;
typedef struct _CreateOperation CreateOperation;
typedef struct _MknodOperation MknodOperation;
typedef struct _MkdirOperation MkdirOperation;
typedef struct _SymlinkOperation SymlinkOperation;
typedef struct _LinkOperation LinkOperation;
typedef struct _WriteOperation WriteOperation;
typedef struct _UnlinkOperation UnlinkOperation;
typedef struct _RmdirOperation RmdirOperation;
typedef struct _TruncateOperation TruncateOperation;
typedef struct _ChmodOperation ChmodOperation;
typedef struct _ChownOperation ChownOperation;
typedef struct _RenameOperation RenameOperation;
typedef struct _SetxattrOperation SetxattrOperation;
typedef struct _RemovexattrOperation RemovexattrOperation;


/* --- enums --- */

typedef enum _GenericOperation__OperationType {
  GENERIC_OPERATION__OPERATION_TYPE__CREATE = 3,
  GENERIC_OPERATION__OPERATION_TYPE__MKNOD = 4,
  GENERIC_OPERATION__OPERATION_TYPE__MKDIR = 5,
  GENERIC_OPERATION__OPERATION_TYPE__SYMLINK = 6,
  GENERIC_OPERATION__OPERATION_TYPE__LINK = 7,
  GENERIC_OPERATION__OPERATION_TYPE__WRITE = 8,
  GENERIC_OPERATION__OPERATION_TYPE__UNLINK = 9,
  GENERIC_OPERATION__OPERATION_TYPE__RMDIR = 10,
  GENERIC_OPERATION__OPERATION_TYPE__TRUNCATE = 11,
  GENERIC_OPERATION__OPERATION_TYPE__CHMOD = 12,
  GENERIC_OPERATION__OPERATION_TYPE__CHOWN = 13,
  GENERIC_OPERATION__OPERATION_TYPE__RENAME = 14,
  GENERIC_OPERATION__OPERATION_TYPE__SETXATTR = 15,
  GENERIC_OPERATION__OPERATION_TYPE__REMOVEXATTR = 16
} GenericOperation__OperationType;

/* --- messages --- */

struct  _SyncInitialization
{
  ProtobufCMessage base;
  char *sync_id;
  char *resource;
  int32_t number_files;
};
#define SYNC_INITIALIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_initialization__descriptor) \
    , NULL, NULL, 0 }


struct  _FileChunk
{
  ProtobufCMessage base;
  char *relative_path;
  size_t n_ops;
  GenericOperation **ops;
  protobuf_c_boolean last_chunk;
};
#define FILE_CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file_chunk__descriptor) \
    , NULL, 0,NULL, 0 }


struct  _FileOperation
{
  ProtobufCMessage base;
  char *relative_path;
  GenericOperation *op;
};
#define FILE_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file_operation__descriptor) \
    , NULL, NULL }


struct  _GenericOperation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  GenericOperation__OperationType type;
  CreateOperation *create_op;
  MknodOperation *mknod_op;
  MkdirOperation *mkdir_op;
  SymlinkOperation *symlink_op;
  LinkOperation *link_op;
  WriteOperation *write_op;
  UnlinkOperation *unlink_op;
  RmdirOperation *rmdir_op;
  TruncateOperation *truncate_op;
  ChmodOperation *chmod_op;
  ChownOperation *chown_op;
  RenameOperation *rename_op;
  SetxattrOperation *setxattr_op;
  RemovexattrOperation *removexattr_op;
};
#define GENERIC_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&generic_operation__descriptor) \
    , 0,0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _CreateOperation
{
  ProtobufCMessage base;
  int32_t mode;
};
#define CREATE_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_operation__descriptor) \
    , 0 }


struct  _MknodOperation
{
  ProtobufCMessage base;
  int32_t mode;
  int64_t dev;
};
#define MKNOD_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mknod_operation__descriptor) \
    , 0, 0 }


struct  _MkdirOperation
{
  ProtobufCMessage base;
  int32_t mode;
};
#define MKDIR_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mkdir_operation__descriptor) \
    , 0 }


struct  _SymlinkOperation
{
  ProtobufCMessage base;
  char *target;
};
#define SYMLINK_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&symlink_operation__descriptor) \
    , NULL }


struct  _LinkOperation
{
  ProtobufCMessage base;
  char *target;
};
#define LINK_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&link_operation__descriptor) \
    , NULL }


struct  _WriteOperation
{
  ProtobufCMessage base;
  int64_t offset;
  int32_t size;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define WRITE_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&write_operation__descriptor) \
    , 0, 0, 0,{0,NULL} }


struct  _UnlinkOperation
{
  ProtobufCMessage base;
};
#define UNLINK_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlink_operation__descriptor) \
     }


struct  _RmdirOperation
{
  ProtobufCMessage base;
};
#define RMDIR_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rmdir_operation__descriptor) \
     }


struct  _TruncateOperation
{
  ProtobufCMessage base;
  int64_t newsize;
};
#define TRUNCATE_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&truncate_operation__descriptor) \
    , 0 }


struct  _ChmodOperation
{
  ProtobufCMessage base;
  int32_t mode;
};
#define CHMOD_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chmod_operation__descriptor) \
    , 0 }


struct  _ChownOperation
{
  ProtobufCMessage base;
  int32_t uid;
  int32_t gid;
};
#define CHOWN_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chown_operation__descriptor) \
    , 0, 0 }


struct  _RenameOperation
{
  ProtobufCMessage base;
  char *newpath;
};
#define RENAME_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rename_operation__descriptor) \
    , NULL }


struct  _SetxattrOperation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dummy;
  int32_t dummy;
};
#define SETXATTR_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&setxattr_operation__descriptor) \
    , 0,0 }


struct  _RemovexattrOperation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dummy;
  int32_t dummy;
};
#define REMOVEXATTR_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&removexattr_operation__descriptor) \
    , 0,0 }


/* SyncInitialization methods */
void   sync_initialization__init
                     (SyncInitialization         *message);
size_t sync_initialization__get_packed_size
                     (const SyncInitialization   *message);
size_t sync_initialization__pack
                     (const SyncInitialization   *message,
                      uint8_t             *out);
size_t sync_initialization__pack_to_buffer
                     (const SyncInitialization   *message,
                      ProtobufCBuffer     *buffer);
SyncInitialization *
       sync_initialization__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_initialization__free_unpacked
                     (SyncInitialization *message,
                      ProtobufCAllocator *allocator);
/* FileChunk methods */
void   file_chunk__init
                     (FileChunk         *message);
size_t file_chunk__get_packed_size
                     (const FileChunk   *message);
size_t file_chunk__pack
                     (const FileChunk   *message,
                      uint8_t             *out);
size_t file_chunk__pack_to_buffer
                     (const FileChunk   *message,
                      ProtobufCBuffer     *buffer);
FileChunk *
       file_chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file_chunk__free_unpacked
                     (FileChunk *message,
                      ProtobufCAllocator *allocator);
/* FileOperation methods */
void   file_operation__init
                     (FileOperation         *message);
size_t file_operation__get_packed_size
                     (const FileOperation   *message);
size_t file_operation__pack
                     (const FileOperation   *message,
                      uint8_t             *out);
size_t file_operation__pack_to_buffer
                     (const FileOperation   *message,
                      ProtobufCBuffer     *buffer);
FileOperation *
       file_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file_operation__free_unpacked
                     (FileOperation *message,
                      ProtobufCAllocator *allocator);
/* GenericOperation methods */
void   generic_operation__init
                     (GenericOperation         *message);
size_t generic_operation__get_packed_size
                     (const GenericOperation   *message);
size_t generic_operation__pack
                     (const GenericOperation   *message,
                      uint8_t             *out);
size_t generic_operation__pack_to_buffer
                     (const GenericOperation   *message,
                      ProtobufCBuffer     *buffer);
GenericOperation *
       generic_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   generic_operation__free_unpacked
                     (GenericOperation *message,
                      ProtobufCAllocator *allocator);
/* CreateOperation methods */
void   create_operation__init
                     (CreateOperation         *message);
size_t create_operation__get_packed_size
                     (const CreateOperation   *message);
size_t create_operation__pack
                     (const CreateOperation   *message,
                      uint8_t             *out);
size_t create_operation__pack_to_buffer
                     (const CreateOperation   *message,
                      ProtobufCBuffer     *buffer);
CreateOperation *
       create_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_operation__free_unpacked
                     (CreateOperation *message,
                      ProtobufCAllocator *allocator);
/* MknodOperation methods */
void   mknod_operation__init
                     (MknodOperation         *message);
size_t mknod_operation__get_packed_size
                     (const MknodOperation   *message);
size_t mknod_operation__pack
                     (const MknodOperation   *message,
                      uint8_t             *out);
size_t mknod_operation__pack_to_buffer
                     (const MknodOperation   *message,
                      ProtobufCBuffer     *buffer);
MknodOperation *
       mknod_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mknod_operation__free_unpacked
                     (MknodOperation *message,
                      ProtobufCAllocator *allocator);
/* MkdirOperation methods */
void   mkdir_operation__init
                     (MkdirOperation         *message);
size_t mkdir_operation__get_packed_size
                     (const MkdirOperation   *message);
size_t mkdir_operation__pack
                     (const MkdirOperation   *message,
                      uint8_t             *out);
size_t mkdir_operation__pack_to_buffer
                     (const MkdirOperation   *message,
                      ProtobufCBuffer     *buffer);
MkdirOperation *
       mkdir_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mkdir_operation__free_unpacked
                     (MkdirOperation *message,
                      ProtobufCAllocator *allocator);
/* SymlinkOperation methods */
void   symlink_operation__init
                     (SymlinkOperation         *message);
size_t symlink_operation__get_packed_size
                     (const SymlinkOperation   *message);
size_t symlink_operation__pack
                     (const SymlinkOperation   *message,
                      uint8_t             *out);
size_t symlink_operation__pack_to_buffer
                     (const SymlinkOperation   *message,
                      ProtobufCBuffer     *buffer);
SymlinkOperation *
       symlink_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   symlink_operation__free_unpacked
                     (SymlinkOperation *message,
                      ProtobufCAllocator *allocator);
/* LinkOperation methods */
void   link_operation__init
                     (LinkOperation         *message);
size_t link_operation__get_packed_size
                     (const LinkOperation   *message);
size_t link_operation__pack
                     (const LinkOperation   *message,
                      uint8_t             *out);
size_t link_operation__pack_to_buffer
                     (const LinkOperation   *message,
                      ProtobufCBuffer     *buffer);
LinkOperation *
       link_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   link_operation__free_unpacked
                     (LinkOperation *message,
                      ProtobufCAllocator *allocator);
/* WriteOperation methods */
void   write_operation__init
                     (WriteOperation         *message);
size_t write_operation__get_packed_size
                     (const WriteOperation   *message);
size_t write_operation__pack
                     (const WriteOperation   *message,
                      uint8_t             *out);
size_t write_operation__pack_to_buffer
                     (const WriteOperation   *message,
                      ProtobufCBuffer     *buffer);
WriteOperation *
       write_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   write_operation__free_unpacked
                     (WriteOperation *message,
                      ProtobufCAllocator *allocator);
/* UnlinkOperation methods */
void   unlink_operation__init
                     (UnlinkOperation         *message);
size_t unlink_operation__get_packed_size
                     (const UnlinkOperation   *message);
size_t unlink_operation__pack
                     (const UnlinkOperation   *message,
                      uint8_t             *out);
size_t unlink_operation__pack_to_buffer
                     (const UnlinkOperation   *message,
                      ProtobufCBuffer     *buffer);
UnlinkOperation *
       unlink_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlink_operation__free_unpacked
                     (UnlinkOperation *message,
                      ProtobufCAllocator *allocator);
/* RmdirOperation methods */
void   rmdir_operation__init
                     (RmdirOperation         *message);
size_t rmdir_operation__get_packed_size
                     (const RmdirOperation   *message);
size_t rmdir_operation__pack
                     (const RmdirOperation   *message,
                      uint8_t             *out);
size_t rmdir_operation__pack_to_buffer
                     (const RmdirOperation   *message,
                      ProtobufCBuffer     *buffer);
RmdirOperation *
       rmdir_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rmdir_operation__free_unpacked
                     (RmdirOperation *message,
                      ProtobufCAllocator *allocator);
/* TruncateOperation methods */
void   truncate_operation__init
                     (TruncateOperation         *message);
size_t truncate_operation__get_packed_size
                     (const TruncateOperation   *message);
size_t truncate_operation__pack
                     (const TruncateOperation   *message,
                      uint8_t             *out);
size_t truncate_operation__pack_to_buffer
                     (const TruncateOperation   *message,
                      ProtobufCBuffer     *buffer);
TruncateOperation *
       truncate_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   truncate_operation__free_unpacked
                     (TruncateOperation *message,
                      ProtobufCAllocator *allocator);
/* ChmodOperation methods */
void   chmod_operation__init
                     (ChmodOperation         *message);
size_t chmod_operation__get_packed_size
                     (const ChmodOperation   *message);
size_t chmod_operation__pack
                     (const ChmodOperation   *message,
                      uint8_t             *out);
size_t chmod_operation__pack_to_buffer
                     (const ChmodOperation   *message,
                      ProtobufCBuffer     *buffer);
ChmodOperation *
       chmod_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chmod_operation__free_unpacked
                     (ChmodOperation *message,
                      ProtobufCAllocator *allocator);
/* ChownOperation methods */
void   chown_operation__init
                     (ChownOperation         *message);
size_t chown_operation__get_packed_size
                     (const ChownOperation   *message);
size_t chown_operation__pack
                     (const ChownOperation   *message,
                      uint8_t             *out);
size_t chown_operation__pack_to_buffer
                     (const ChownOperation   *message,
                      ProtobufCBuffer     *buffer);
ChownOperation *
       chown_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chown_operation__free_unpacked
                     (ChownOperation *message,
                      ProtobufCAllocator *allocator);
/* RenameOperation methods */
void   rename_operation__init
                     (RenameOperation         *message);
size_t rename_operation__get_packed_size
                     (const RenameOperation   *message);
size_t rename_operation__pack
                     (const RenameOperation   *message,
                      uint8_t             *out);
size_t rename_operation__pack_to_buffer
                     (const RenameOperation   *message,
                      ProtobufCBuffer     *buffer);
RenameOperation *
       rename_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rename_operation__free_unpacked
                     (RenameOperation *message,
                      ProtobufCAllocator *allocator);
/* SetxattrOperation methods */
void   setxattr_operation__init
                     (SetxattrOperation         *message);
size_t setxattr_operation__get_packed_size
                     (const SetxattrOperation   *message);
size_t setxattr_operation__pack
                     (const SetxattrOperation   *message,
                      uint8_t             *out);
size_t setxattr_operation__pack_to_buffer
                     (const SetxattrOperation   *message,
                      ProtobufCBuffer     *buffer);
SetxattrOperation *
       setxattr_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   setxattr_operation__free_unpacked
                     (SetxattrOperation *message,
                      ProtobufCAllocator *allocator);
/* RemovexattrOperation methods */
void   removexattr_operation__init
                     (RemovexattrOperation         *message);
size_t removexattr_operation__get_packed_size
                     (const RemovexattrOperation   *message);
size_t removexattr_operation__pack
                     (const RemovexattrOperation   *message,
                      uint8_t             *out);
size_t removexattr_operation__pack_to_buffer
                     (const RemovexattrOperation   *message,
                      ProtobufCBuffer     *buffer);
RemovexattrOperation *
       removexattr_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   removexattr_operation__free_unpacked
                     (RemovexattrOperation *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SyncInitialization_Closure)
                 (const SyncInitialization *message,
                  void *closure_data);
typedef void (*FileChunk_Closure)
                 (const FileChunk *message,
                  void *closure_data);
typedef void (*FileOperation_Closure)
                 (const FileOperation *message,
                  void *closure_data);
typedef void (*GenericOperation_Closure)
                 (const GenericOperation *message,
                  void *closure_data);
typedef void (*CreateOperation_Closure)
                 (const CreateOperation *message,
                  void *closure_data);
typedef void (*MknodOperation_Closure)
                 (const MknodOperation *message,
                  void *closure_data);
typedef void (*MkdirOperation_Closure)
                 (const MkdirOperation *message,
                  void *closure_data);
typedef void (*SymlinkOperation_Closure)
                 (const SymlinkOperation *message,
                  void *closure_data);
typedef void (*LinkOperation_Closure)
                 (const LinkOperation *message,
                  void *closure_data);
typedef void (*WriteOperation_Closure)
                 (const WriteOperation *message,
                  void *closure_data);
typedef void (*UnlinkOperation_Closure)
                 (const UnlinkOperation *message,
                  void *closure_data);
typedef void (*RmdirOperation_Closure)
                 (const RmdirOperation *message,
                  void *closure_data);
typedef void (*TruncateOperation_Closure)
                 (const TruncateOperation *message,
                  void *closure_data);
typedef void (*ChmodOperation_Closure)
                 (const ChmodOperation *message,
                  void *closure_data);
typedef void (*ChownOperation_Closure)
                 (const ChownOperation *message,
                  void *closure_data);
typedef void (*RenameOperation_Closure)
                 (const RenameOperation *message,
                  void *closure_data);
typedef void (*SetxattrOperation_Closure)
                 (const SetxattrOperation *message,
                  void *closure_data);
typedef void (*RemovexattrOperation_Closure)
                 (const RemovexattrOperation *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sync_initialization__descriptor;
extern const ProtobufCMessageDescriptor file_chunk__descriptor;
extern const ProtobufCMessageDescriptor file_operation__descriptor;
extern const ProtobufCMessageDescriptor generic_operation__descriptor;
extern const ProtobufCEnumDescriptor    generic_operation__operation_type__descriptor;
extern const ProtobufCMessageDescriptor create_operation__descriptor;
extern const ProtobufCMessageDescriptor mknod_operation__descriptor;
extern const ProtobufCMessageDescriptor mkdir_operation__descriptor;
extern const ProtobufCMessageDescriptor symlink_operation__descriptor;
extern const ProtobufCMessageDescriptor link_operation__descriptor;
extern const ProtobufCMessageDescriptor write_operation__descriptor;
extern const ProtobufCMessageDescriptor unlink_operation__descriptor;
extern const ProtobufCMessageDescriptor rmdir_operation__descriptor;
extern const ProtobufCMessageDescriptor truncate_operation__descriptor;
extern const ProtobufCMessageDescriptor chmod_operation__descriptor;
extern const ProtobufCMessageDescriptor chown_operation__descriptor;
extern const ProtobufCMessageDescriptor rename_operation__descriptor;
extern const ProtobufCMessageDescriptor setxattr_operation__descriptor;
extern const ProtobufCMessageDescriptor removexattr_operation__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_syncedfs_2eproto__INCLUDED */
